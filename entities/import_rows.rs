//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "import_rows")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub data: String,
    pub hash: String,
    pub import_id: Uuid,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::imports::Entity",
        from = "Column::ImportId",
        to = "super::imports::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Imports,
}

impl Related<super::imports::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Imports.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
